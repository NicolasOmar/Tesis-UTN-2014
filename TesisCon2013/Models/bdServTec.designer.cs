#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.34209
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TesisCon2013.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="servicioTecnico")]
	public partial class bdServTecDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Definiciones de métodos de extensibilidad
    partial void OnCreated();
    partial void InsertBarrios(Barrios instance);
    partial void UpdateBarrios(Barrios instance);
    partial void DeleteBarrios(Barrios instance);
    partial void InsertClientes(Clientes instance);
    partial void UpdateClientes(Clientes instance);
    partial void DeleteClientes(Clientes instance);
    partial void InsertEquipos(Equipos instance);
    partial void UpdateEquipos(Equipos instance);
    partial void DeleteEquipos(Equipos instance);
    partial void InsertEstados(Estados instance);
    partial void UpdateEstados(Estados instance);
    partial void DeleteEstados(Estados instance);
    partial void InsertMarcas(Marcas instance);
    partial void UpdateMarcas(Marcas instance);
    partial void DeleteMarcas(Marcas instance);
    partial void InsertOrdenes(Ordenes instance);
    partial void UpdateOrdenes(Ordenes instance);
    partial void DeleteOrdenes(Ordenes instance);
    partial void InsertRoles(Roles instance);
    partial void UpdateRoles(Roles instance);
    partial void DeleteRoles(Roles instance);
    partial void InsertTareas(Tareas instance);
    partial void UpdateTareas(Tareas instance);
    partial void DeleteTareas(Tareas instance);
    partial void InsertTipoMarca(TipoMarca instance);
    partial void UpdateTipoMarca(TipoMarca instance);
    partial void DeleteTipoMarca(TipoMarca instance);
    partial void InsertTipos(Tipos instance);
    partial void UpdateTipos(Tipos instance);
    partial void DeleteTipos(Tipos instance);
    partial void InsertUsuarios(Usuarios instance);
    partial void UpdateUsuarios(Usuarios instance);
    partial void DeleteUsuarios(Usuarios instance);
    #endregion
		
		public bdServTecDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["servicioTecnicoConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public bdServTecDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bdServTecDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bdServTecDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public bdServTecDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Barrios> Barrios
		{
			get
			{
				return this.GetTable<Barrios>();
			}
		}
		
		public System.Data.Linq.Table<Clientes> Clientes
		{
			get
			{
				return this.GetTable<Clientes>();
			}
		}
		
		public System.Data.Linq.Table<Equipos> Equipos
		{
			get
			{
				return this.GetTable<Equipos>();
			}
		}
		
		public System.Data.Linq.Table<Estados> Estados
		{
			get
			{
				return this.GetTable<Estados>();
			}
		}
		
		public System.Data.Linq.Table<Marcas> Marcas
		{
			get
			{
				return this.GetTable<Marcas>();
			}
		}
		
		public System.Data.Linq.Table<Ordenes> Ordenes
		{
			get
			{
				return this.GetTable<Ordenes>();
			}
		}
		
		public System.Data.Linq.Table<Roles> Roles
		{
			get
			{
				return this.GetTable<Roles>();
			}
		}
		
		public System.Data.Linq.Table<Tareas> Tareas
		{
			get
			{
				return this.GetTable<Tareas>();
			}
		}
		
		public System.Data.Linq.Table<TipoMarca> TipoMarca
		{
			get
			{
				return this.GetTable<TipoMarca>();
			}
		}
		
		public System.Data.Linq.Table<Tipos> Tipos
		{
			get
			{
				return this.GetTable<Tipos>();
			}
		}
		
		public System.Data.Linq.Table<Usuarios> Usuarios
		{
			get
			{
				return this.GetTable<Usuarios>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Barrios")]
	public partial class Barrios : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idBarrio;
		
		private string _barrio;
		
		private EntitySet<Clientes> _Clientes;
		
		private EntitySet<Usuarios> _Usuarios;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidBarrioChanging(short value);
    partial void OnidBarrioChanged();
    partial void OnbarrioChanging(string value);
    partial void OnbarrioChanged();
    #endregion
		
		public Barrios()
		{
			this._Clientes = new EntitySet<Clientes>(new Action<Clientes>(this.attach_Clientes), new Action<Clientes>(this.detach_Clientes));
			this._Usuarios = new EntitySet<Usuarios>(new Action<Usuarios>(this.attach_Usuarios), new Action<Usuarios>(this.detach_Usuarios));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBarrio", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idBarrio
		{
			get
			{
				return this._idBarrio;
			}
			set
			{
				if ((this._idBarrio != value))
				{
					this.OnidBarrioChanging(value);
					this.SendPropertyChanging();
					this._idBarrio = value;
					this.SendPropertyChanged("idBarrio");
					this.OnidBarrioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_barrio", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string barrio
		{
			get
			{
				return this._barrio;
			}
			set
			{
				if ((this._barrio != value))
				{
					this.OnbarrioChanging(value);
					this.SendPropertyChanging();
					this._barrio = value;
					this.SendPropertyChanged("barrio");
					this.OnbarrioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barrios_Clientes", Storage="_Clientes", ThisKey="idBarrio", OtherKey="idBarrio")]
		public EntitySet<Clientes> Clientes
		{
			get
			{
				return this._Clientes;
			}
			set
			{
				this._Clientes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barrios_Usuarios", Storage="_Usuarios", ThisKey="idBarrio", OtherKey="idBarrio")]
		public EntitySet<Usuarios> Usuarios
		{
			get
			{
				return this._Usuarios;
			}
			set
			{
				this._Usuarios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Clientes(Clientes entity)
		{
			this.SendPropertyChanging();
			entity.Barrios = this;
		}
		
		private void detach_Clientes(Clientes entity)
		{
			this.SendPropertyChanging();
			entity.Barrios = null;
		}
		
		private void attach_Usuarios(Usuarios entity)
		{
			this.SendPropertyChanging();
			entity.Barrios = this;
		}
		
		private void detach_Usuarios(Usuarios entity)
		{
			this.SendPropertyChanging();
			entity.Barrios = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clientes")]
	public partial class Clientes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idClie;
		
		private string _nomClie;
		
		private string _apeClie;
		
		private string _direClie;
		
		private System.Nullable<short> _idBarrio;
		
		private string _telClie;
		
		private EntitySet<Equipos> _Equipos;
		
		private EntityRef<Barrios> _Barrios;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidClieChanging(short value);
    partial void OnidClieChanged();
    partial void OnnomClieChanging(string value);
    partial void OnnomClieChanged();
    partial void OnapeClieChanging(string value);
    partial void OnapeClieChanged();
    partial void OndireClieChanging(string value);
    partial void OndireClieChanged();
    partial void OnidBarrioChanging(System.Nullable<short> value);
    partial void OnidBarrioChanged();
    partial void OntelClieChanging(string value);
    partial void OntelClieChanged();
    #endregion
		
		public Clientes()
		{
			this._Equipos = new EntitySet<Equipos>(new Action<Equipos>(this.attach_Equipos), new Action<Equipos>(this.detach_Equipos));
			this._Barrios = default(EntityRef<Barrios>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClie", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idClie
		{
			get
			{
				return this._idClie;
			}
			set
			{
				if ((this._idClie != value))
				{
					this.OnidClieChanging(value);
					this.SendPropertyChanging();
					this._idClie = value;
					this.SendPropertyChanged("idClie");
					this.OnidClieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomClie", DbType="NVarChar(20)")]
		public string nomClie
		{
			get
			{
				return this._nomClie;
			}
			set
			{
				if ((this._nomClie != value))
				{
					this.OnnomClieChanging(value);
					this.SendPropertyChanging();
					this._nomClie = value;
					this.SendPropertyChanged("nomClie");
					this.OnnomClieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_apeClie", DbType="NVarChar(20)")]
		public string apeClie
		{
			get
			{
				return this._apeClie;
			}
			set
			{
				if ((this._apeClie != value))
				{
					this.OnapeClieChanging(value);
					this.SendPropertyChanging();
					this._apeClie = value;
					this.SendPropertyChanged("apeClie");
					this.OnapeClieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_direClie", DbType="NVarChar(40)")]
		public string direClie
		{
			get
			{
				return this._direClie;
			}
			set
			{
				if ((this._direClie != value))
				{
					this.OndireClieChanging(value);
					this.SendPropertyChanging();
					this._direClie = value;
					this.SendPropertyChanged("direClie");
					this.OndireClieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBarrio", DbType="SmallInt")]
		public System.Nullable<short> idBarrio
		{
			get
			{
				return this._idBarrio;
			}
			set
			{
				if ((this._idBarrio != value))
				{
					if (this._Barrios.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBarrioChanging(value);
					this.SendPropertyChanging();
					this._idBarrio = value;
					this.SendPropertyChanged("idBarrio");
					this.OnidBarrioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telClie", DbType="NVarChar(15)")]
		public string telClie
		{
			get
			{
				return this._telClie;
			}
			set
			{
				if ((this._telClie != value))
				{
					this.OntelClieChanging(value);
					this.SendPropertyChanging();
					this._telClie = value;
					this.SendPropertyChanged("telClie");
					this.OntelClieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clientes_Equipos", Storage="_Equipos", ThisKey="idClie", OtherKey="idClie")]
		public EntitySet<Equipos> Equipos
		{
			get
			{
				return this._Equipos;
			}
			set
			{
				this._Equipos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barrios_Clientes", Storage="_Barrios", ThisKey="idBarrio", OtherKey="idBarrio", IsForeignKey=true)]
		public Barrios Barrios
		{
			get
			{
				return this._Barrios.Entity;
			}
			set
			{
				Barrios previousValue = this._Barrios.Entity;
				if (((previousValue != value) 
							|| (this._Barrios.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Barrios.Entity = null;
						previousValue.Clientes.Remove(this);
					}
					this._Barrios.Entity = value;
					if ((value != null))
					{
						value.Clientes.Add(this);
						this._idBarrio = value.idBarrio;
					}
					else
					{
						this._idBarrio = default(Nullable<short>);
					}
					this.SendPropertyChanged("Barrios");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Equipos(Equipos entity)
		{
			this.SendPropertyChanging();
			entity.Clientes = this;
		}
		
		private void detach_Equipos(Equipos entity)
		{
			this.SendPropertyChanging();
			entity.Clientes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Equipos")]
	public partial class Equipos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idEquipo;
		
		private System.Nullable<short> _idTipoMarca;
		
		private string _modelo;
		
		private string _numSerie;
		
		private System.Nullable<short> _idClie;
		
		private EntitySet<Ordenes> _Ordenes;
		
		private EntityRef<Clientes> _Clientes;
		
		private EntityRef<TipoMarca> _TipoMarca;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEquipoChanging(int value);
    partial void OnidEquipoChanged();
    partial void OnidTipoMarcaChanging(System.Nullable<short> value);
    partial void OnidTipoMarcaChanged();
    partial void OnmodeloChanging(string value);
    partial void OnmodeloChanged();
    partial void OnnumSerieChanging(string value);
    partial void OnnumSerieChanged();
    partial void OnidClieChanging(System.Nullable<short> value);
    partial void OnidClieChanged();
    #endregion
		
		public Equipos()
		{
			this._Ordenes = new EntitySet<Ordenes>(new Action<Ordenes>(this.attach_Ordenes), new Action<Ordenes>(this.detach_Ordenes));
			this._Clientes = default(EntityRef<Clientes>);
			this._TipoMarca = default(EntityRef<TipoMarca>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEquipo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idEquipo
		{
			get
			{
				return this._idEquipo;
			}
			set
			{
				if ((this._idEquipo != value))
				{
					this.OnidEquipoChanging(value);
					this.SendPropertyChanging();
					this._idEquipo = value;
					this.SendPropertyChanged("idEquipo");
					this.OnidEquipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTipoMarca", DbType="SmallInt")]
		public System.Nullable<short> idTipoMarca
		{
			get
			{
				return this._idTipoMarca;
			}
			set
			{
				if ((this._idTipoMarca != value))
				{
					if (this._TipoMarca.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTipoMarcaChanging(value);
					this.SendPropertyChanging();
					this._idTipoMarca = value;
					this.SendPropertyChanged("idTipoMarca");
					this.OnidTipoMarcaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_modelo", DbType="NVarChar(20)")]
		public string modelo
		{
			get
			{
				return this._modelo;
			}
			set
			{
				if ((this._modelo != value))
				{
					this.OnmodeloChanging(value);
					this.SendPropertyChanging();
					this._modelo = value;
					this.SendPropertyChanged("modelo");
					this.OnmodeloChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numSerie", DbType="NVarChar(30)")]
		public string numSerie
		{
			get
			{
				return this._numSerie;
			}
			set
			{
				if ((this._numSerie != value))
				{
					this.OnnumSerieChanging(value);
					this.SendPropertyChanging();
					this._numSerie = value;
					this.SendPropertyChanged("numSerie");
					this.OnnumSerieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idClie", DbType="SmallInt")]
		public System.Nullable<short> idClie
		{
			get
			{
				return this._idClie;
			}
			set
			{
				if ((this._idClie != value))
				{
					if (this._Clientes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidClieChanging(value);
					this.SendPropertyChanging();
					this._idClie = value;
					this.SendPropertyChanged("idClie");
					this.OnidClieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipos_Ordenes", Storage="_Ordenes", ThisKey="idEquipo", OtherKey="idEquipo")]
		public EntitySet<Ordenes> Ordenes
		{
			get
			{
				return this._Ordenes;
			}
			set
			{
				this._Ordenes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Clientes_Equipos", Storage="_Clientes", ThisKey="idClie", OtherKey="idClie", IsForeignKey=true)]
		public Clientes Clientes
		{
			get
			{
				return this._Clientes.Entity;
			}
			set
			{
				Clientes previousValue = this._Clientes.Entity;
				if (((previousValue != value) 
							|| (this._Clientes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Clientes.Entity = null;
						previousValue.Equipos.Remove(this);
					}
					this._Clientes.Entity = value;
					if ((value != null))
					{
						value.Equipos.Add(this);
						this._idClie = value.idClie;
					}
					else
					{
						this._idClie = default(Nullable<short>);
					}
					this.SendPropertyChanged("Clientes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoMarca_Equipos", Storage="_TipoMarca", ThisKey="idTipoMarca", OtherKey="idTipoMarca", IsForeignKey=true)]
		public TipoMarca TipoMarca
		{
			get
			{
				return this._TipoMarca.Entity;
			}
			set
			{
				TipoMarca previousValue = this._TipoMarca.Entity;
				if (((previousValue != value) 
							|| (this._TipoMarca.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TipoMarca.Entity = null;
						previousValue.Equipos.Remove(this);
					}
					this._TipoMarca.Entity = value;
					if ((value != null))
					{
						value.Equipos.Add(this);
						this._idTipoMarca = value.idTipoMarca;
					}
					else
					{
						this._idTipoMarca = default(Nullable<short>);
					}
					this.SendPropertyChanged("TipoMarca");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ordenes(Ordenes entity)
		{
			this.SendPropertyChanging();
			entity.Equipos = this;
		}
		
		private void detach_Ordenes(Ordenes entity)
		{
			this.SendPropertyChanging();
			entity.Equipos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Estados")]
	public partial class Estados : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idEstado;
		
		private string _estado;
		
		private EntitySet<Ordenes> _Ordenes;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidEstadoChanging(short value);
    partial void OnidEstadoChanged();
    partial void OnestadoChanging(string value);
    partial void OnestadoChanged();
    #endregion
		
		public Estados()
		{
			this._Ordenes = new EntitySet<Ordenes>(new Action<Ordenes>(this.attach_Ordenes), new Action<Ordenes>(this.detach_Ordenes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEstado", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idEstado
		{
			get
			{
				return this._idEstado;
			}
			set
			{
				if ((this._idEstado != value))
				{
					this.OnidEstadoChanging(value);
					this.SendPropertyChanging();
					this._idEstado = value;
					this.SendPropertyChanged("idEstado");
					this.OnidEstadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_estado", DbType="NVarChar(14)")]
		public string estado
		{
			get
			{
				return this._estado;
			}
			set
			{
				if ((this._estado != value))
				{
					this.OnestadoChanging(value);
					this.SendPropertyChanging();
					this._estado = value;
					this.SendPropertyChanged("estado");
					this.OnestadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estados_Ordenes", Storage="_Ordenes", ThisKey="idEstado", OtherKey="idEstado")]
		public EntitySet<Ordenes> Ordenes
		{
			get
			{
				return this._Ordenes;
			}
			set
			{
				this._Ordenes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ordenes(Ordenes entity)
		{
			this.SendPropertyChanging();
			entity.Estados = this;
		}
		
		private void detach_Ordenes(Ordenes entity)
		{
			this.SendPropertyChanging();
			entity.Estados = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Marcas")]
	public partial class Marcas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idMarca;
		
		private string _marca;
		
		private EntitySet<TipoMarca> _TipoMarca;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidMarcaChanging(short value);
    partial void OnidMarcaChanged();
    partial void OnmarcaChanging(string value);
    partial void OnmarcaChanged();
    #endregion
		
		public Marcas()
		{
			this._TipoMarca = new EntitySet<TipoMarca>(new Action<TipoMarca>(this.attach_TipoMarca), new Action<TipoMarca>(this.detach_TipoMarca));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMarca", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idMarca
		{
			get
			{
				return this._idMarca;
			}
			set
			{
				if ((this._idMarca != value))
				{
					this.OnidMarcaChanging(value);
					this.SendPropertyChanging();
					this._idMarca = value;
					this.SendPropertyChanged("idMarca");
					this.OnidMarcaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_marca", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string marca
		{
			get
			{
				return this._marca;
			}
			set
			{
				if ((this._marca != value))
				{
					this.OnmarcaChanging(value);
					this.SendPropertyChanging();
					this._marca = value;
					this.SendPropertyChanged("marca");
					this.OnmarcaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marcas_TipoMarca", Storage="_TipoMarca", ThisKey="idMarca", OtherKey="idMarca")]
		public EntitySet<TipoMarca> TipoMarca
		{
			get
			{
				return this._TipoMarca;
			}
			set
			{
				this._TipoMarca.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TipoMarca(TipoMarca entity)
		{
			this.SendPropertyChanging();
			entity.Marcas = this;
		}
		
		private void detach_TipoMarca(TipoMarca entity)
		{
			this.SendPropertyChanging();
			entity.Marcas = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ordenes")]
	public partial class Ordenes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idOrden;
		
		private System.Nullable<int> _idEquipo;
		
		private string _falla;
		
		private string _observ;
		
		private System.Nullable<System.DateTime> _fecRecib;
		
		private System.Nullable<short> _idEstado;
		
		private System.Nullable<bool> _aviso;
		
		private System.Nullable<System.DateTime> _fecAviso;
		
		private System.Nullable<System.DateTime> _fecEntrega;
		
		private EntitySet<Tareas> _Tareas;
		
		private EntityRef<Equipos> _Equipos;
		
		private EntityRef<Estados> _Estados;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidOrdenChanging(int value);
    partial void OnidOrdenChanged();
    partial void OnidEquipoChanging(System.Nullable<int> value);
    partial void OnidEquipoChanged();
    partial void OnfallaChanging(string value);
    partial void OnfallaChanged();
    partial void OnobservChanging(string value);
    partial void OnobservChanged();
    partial void OnfecRecibChanging(System.Nullable<System.DateTime> value);
    partial void OnfecRecibChanged();
    partial void OnidEstadoChanging(System.Nullable<short> value);
    partial void OnidEstadoChanged();
    partial void OnavisoChanging(System.Nullable<bool> value);
    partial void OnavisoChanged();
    partial void OnfecAvisoChanging(System.Nullable<System.DateTime> value);
    partial void OnfecAvisoChanged();
    partial void OnfecEntregaChanging(System.Nullable<System.DateTime> value);
    partial void OnfecEntregaChanged();
    #endregion
		
		public Ordenes()
		{
			this._Tareas = new EntitySet<Tareas>(new Action<Tareas>(this.attach_Tareas), new Action<Tareas>(this.detach_Tareas));
			this._Equipos = default(EntityRef<Equipos>);
			this._Estados = default(EntityRef<Estados>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOrden", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idOrden
		{
			get
			{
				return this._idOrden;
			}
			set
			{
				if ((this._idOrden != value))
				{
					this.OnidOrdenChanging(value);
					this.SendPropertyChanging();
					this._idOrden = value;
					this.SendPropertyChanged("idOrden");
					this.OnidOrdenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEquipo", DbType="Int")]
		public System.Nullable<int> idEquipo
		{
			get
			{
				return this._idEquipo;
			}
			set
			{
				if ((this._idEquipo != value))
				{
					if (this._Equipos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEquipoChanging(value);
					this.SendPropertyChanging();
					this._idEquipo = value;
					this.SendPropertyChanged("idEquipo");
					this.OnidEquipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_falla", DbType="NVarChar(150)")]
		public string falla
		{
			get
			{
				return this._falla;
			}
			set
			{
				if ((this._falla != value))
				{
					this.OnfallaChanging(value);
					this.SendPropertyChanging();
					this._falla = value;
					this.SendPropertyChanged("falla");
					this.OnfallaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_observ", DbType="NVarChar(150)")]
		public string observ
		{
			get
			{
				return this._observ;
			}
			set
			{
				if ((this._observ != value))
				{
					this.OnobservChanging(value);
					this.SendPropertyChanging();
					this._observ = value;
					this.SendPropertyChanged("observ");
					this.OnobservChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fecRecib", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> fecRecib
		{
			get
			{
				return this._fecRecib;
			}
			set
			{
				if ((this._fecRecib != value))
				{
					this.OnfecRecibChanging(value);
					this.SendPropertyChanging();
					this._fecRecib = value;
					this.SendPropertyChanged("fecRecib");
					this.OnfecRecibChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idEstado", DbType="SmallInt")]
		public System.Nullable<short> idEstado
		{
			get
			{
				return this._idEstado;
			}
			set
			{
				if ((this._idEstado != value))
				{
					if (this._Estados.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidEstadoChanging(value);
					this.SendPropertyChanging();
					this._idEstado = value;
					this.SendPropertyChanged("idEstado");
					this.OnidEstadoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aviso", DbType="Bit")]
		public System.Nullable<bool> aviso
		{
			get
			{
				return this._aviso;
			}
			set
			{
				if ((this._aviso != value))
				{
					this.OnavisoChanging(value);
					this.SendPropertyChanging();
					this._aviso = value;
					this.SendPropertyChanged("aviso");
					this.OnavisoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fecAviso", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> fecAviso
		{
			get
			{
				return this._fecAviso;
			}
			set
			{
				if ((this._fecAviso != value))
				{
					this.OnfecAvisoChanging(value);
					this.SendPropertyChanging();
					this._fecAviso = value;
					this.SendPropertyChanged("fecAviso");
					this.OnfecAvisoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fecEntrega", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> fecEntrega
		{
			get
			{
				return this._fecEntrega;
			}
			set
			{
				if ((this._fecEntrega != value))
				{
					this.OnfecEntregaChanging(value);
					this.SendPropertyChanging();
					this._fecEntrega = value;
					this.SendPropertyChanged("fecEntrega");
					this.OnfecEntregaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ordenes_Tareas", Storage="_Tareas", ThisKey="idOrden", OtherKey="idOrden")]
		public EntitySet<Tareas> Tareas
		{
			get
			{
				return this._Tareas;
			}
			set
			{
				this._Tareas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Equipos_Ordenes", Storage="_Equipos", ThisKey="idEquipo", OtherKey="idEquipo", IsForeignKey=true)]
		public Equipos Equipos
		{
			get
			{
				return this._Equipos.Entity;
			}
			set
			{
				Equipos previousValue = this._Equipos.Entity;
				if (((previousValue != value) 
							|| (this._Equipos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Equipos.Entity = null;
						previousValue.Ordenes.Remove(this);
					}
					this._Equipos.Entity = value;
					if ((value != null))
					{
						value.Ordenes.Add(this);
						this._idEquipo = value.idEquipo;
					}
					else
					{
						this._idEquipo = default(Nullable<int>);
					}
					this.SendPropertyChanged("Equipos");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Estados_Ordenes", Storage="_Estados", ThisKey="idEstado", OtherKey="idEstado", IsForeignKey=true)]
		public Estados Estados
		{
			get
			{
				return this._Estados.Entity;
			}
			set
			{
				Estados previousValue = this._Estados.Entity;
				if (((previousValue != value) 
							|| (this._Estados.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Estados.Entity = null;
						previousValue.Ordenes.Remove(this);
					}
					this._Estados.Entity = value;
					if ((value != null))
					{
						value.Ordenes.Add(this);
						this._idEstado = value.idEstado;
					}
					else
					{
						this._idEstado = default(Nullable<short>);
					}
					this.SendPropertyChanged("Estados");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tareas(Tareas entity)
		{
			this.SendPropertyChanging();
			entity.Ordenes = this;
		}
		
		private void detach_Tareas(Tareas entity)
		{
			this.SendPropertyChanging();
			entity.Ordenes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Roles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idRol;
		
		private string _rol;
		
		private EntitySet<Usuarios> _Usuarios;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidRolChanging(short value);
    partial void OnidRolChanged();
    partial void OnrolChanging(string value);
    partial void OnrolChanged();
    #endregion
		
		public Roles()
		{
			this._Usuarios = new EntitySet<Usuarios>(new Action<Usuarios>(this.attach_Usuarios), new Action<Usuarios>(this.detach_Usuarios));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRol", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idRol
		{
			get
			{
				return this._idRol;
			}
			set
			{
				if ((this._idRol != value))
				{
					this.OnidRolChanging(value);
					this.SendPropertyChanging();
					this._idRol = value;
					this.SendPropertyChanged("idRol");
					this.OnidRolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rol", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string rol
		{
			get
			{
				return this._rol;
			}
			set
			{
				if ((this._rol != value))
				{
					this.OnrolChanging(value);
					this.SendPropertyChanging();
					this._rol = value;
					this.SendPropertyChanged("rol");
					this.OnrolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roles_Usuarios", Storage="_Usuarios", ThisKey="idRol", OtherKey="idRol")]
		public EntitySet<Usuarios> Usuarios
		{
			get
			{
				return this._Usuarios;
			}
			set
			{
				this._Usuarios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Usuarios(Usuarios entity)
		{
			this.SendPropertyChanging();
			entity.Roles = this;
		}
		
		private void detach_Usuarios(Usuarios entity)
		{
			this.SendPropertyChanging();
			entity.Roles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tareas")]
	public partial class Tareas : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTarea;
		
		private System.Nullable<int> _idOrden;
		
		private string _detalles;
		
		private System.Nullable<System.DateTime> _fecTarea;
		
		private System.Nullable<short> _idUsu;
		
		private EntityRef<Ordenes> _Ordenes;
		
		private EntityRef<Usuarios> _Usuarios;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTareaChanging(int value);
    partial void OnidTareaChanged();
    partial void OnidOrdenChanging(System.Nullable<int> value);
    partial void OnidOrdenChanged();
    partial void OndetallesChanging(string value);
    partial void OndetallesChanged();
    partial void OnfecTareaChanging(System.Nullable<System.DateTime> value);
    partial void OnfecTareaChanged();
    partial void OnidUsuChanging(System.Nullable<short> value);
    partial void OnidUsuChanged();
    #endregion
		
		public Tareas()
		{
			this._Ordenes = default(EntityRef<Ordenes>);
			this._Usuarios = default(EntityRef<Usuarios>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTarea", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTarea
		{
			get
			{
				return this._idTarea;
			}
			set
			{
				if ((this._idTarea != value))
				{
					this.OnidTareaChanging(value);
					this.SendPropertyChanging();
					this._idTarea = value;
					this.SendPropertyChanged("idTarea");
					this.OnidTareaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idOrden", DbType="Int")]
		public System.Nullable<int> idOrden
		{
			get
			{
				return this._idOrden;
			}
			set
			{
				if ((this._idOrden != value))
				{
					if (this._Ordenes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidOrdenChanging(value);
					this.SendPropertyChanging();
					this._idOrden = value;
					this.SendPropertyChanged("idOrden");
					this.OnidOrdenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_detalles", DbType="NVarChar(300)")]
		public string detalles
		{
			get
			{
				return this._detalles;
			}
			set
			{
				if ((this._detalles != value))
				{
					this.OndetallesChanging(value);
					this.SendPropertyChanging();
					this._detalles = value;
					this.SendPropertyChanged("detalles");
					this.OndetallesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fecTarea", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> fecTarea
		{
			get
			{
				return this._fecTarea;
			}
			set
			{
				if ((this._fecTarea != value))
				{
					this.OnfecTareaChanging(value);
					this.SendPropertyChanging();
					this._fecTarea = value;
					this.SendPropertyChanged("fecTarea");
					this.OnfecTareaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUsu", DbType="SmallInt")]
		public System.Nullable<short> idUsu
		{
			get
			{
				return this._idUsu;
			}
			set
			{
				if ((this._idUsu != value))
				{
					if (this._Usuarios.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidUsuChanging(value);
					this.SendPropertyChanging();
					this._idUsu = value;
					this.SendPropertyChanged("idUsu");
					this.OnidUsuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ordenes_Tareas", Storage="_Ordenes", ThisKey="idOrden", OtherKey="idOrden", IsForeignKey=true)]
		public Ordenes Ordenes
		{
			get
			{
				return this._Ordenes.Entity;
			}
			set
			{
				Ordenes previousValue = this._Ordenes.Entity;
				if (((previousValue != value) 
							|| (this._Ordenes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ordenes.Entity = null;
						previousValue.Tareas.Remove(this);
					}
					this._Ordenes.Entity = value;
					if ((value != null))
					{
						value.Tareas.Add(this);
						this._idOrden = value.idOrden;
					}
					else
					{
						this._idOrden = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ordenes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuarios_Tareas", Storage="_Usuarios", ThisKey="idUsu", OtherKey="idUsu", IsForeignKey=true)]
		public Usuarios Usuarios
		{
			get
			{
				return this._Usuarios.Entity;
			}
			set
			{
				Usuarios previousValue = this._Usuarios.Entity;
				if (((previousValue != value) 
							|| (this._Usuarios.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Usuarios.Entity = null;
						previousValue.Tareas.Remove(this);
					}
					this._Usuarios.Entity = value;
					if ((value != null))
					{
						value.Tareas.Add(this);
						this._idUsu = value.idUsu;
					}
					else
					{
						this._idUsu = default(Nullable<short>);
					}
					this.SendPropertyChanged("Usuarios");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TipoMarca")]
	public partial class TipoMarca : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idTipoMarca;
		
		private System.Nullable<short> _idTipo;
		
		private System.Nullable<short> _idMarca;
		
		private EntitySet<Equipos> _Equipos;
		
		private EntityRef<Marcas> _Marcas;
		
		private EntityRef<Tipos> _Tipos;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTipoMarcaChanging(short value);
    partial void OnidTipoMarcaChanged();
    partial void OnidTipoChanging(System.Nullable<short> value);
    partial void OnidTipoChanged();
    partial void OnidMarcaChanging(System.Nullable<short> value);
    partial void OnidMarcaChanged();
    #endregion
		
		public TipoMarca()
		{
			this._Equipos = new EntitySet<Equipos>(new Action<Equipos>(this.attach_Equipos), new Action<Equipos>(this.detach_Equipos));
			this._Marcas = default(EntityRef<Marcas>);
			this._Tipos = default(EntityRef<Tipos>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTipoMarca", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idTipoMarca
		{
			get
			{
				return this._idTipoMarca;
			}
			set
			{
				if ((this._idTipoMarca != value))
				{
					this.OnidTipoMarcaChanging(value);
					this.SendPropertyChanging();
					this._idTipoMarca = value;
					this.SendPropertyChanged("idTipoMarca");
					this.OnidTipoMarcaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTipo", DbType="SmallInt")]
		public System.Nullable<short> idTipo
		{
			get
			{
				return this._idTipo;
			}
			set
			{
				if ((this._idTipo != value))
				{
					if (this._Tipos.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidTipoChanging(value);
					this.SendPropertyChanging();
					this._idTipo = value;
					this.SendPropertyChanged("idTipo");
					this.OnidTipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idMarca", DbType="SmallInt")]
		public System.Nullable<short> idMarca
		{
			get
			{
				return this._idMarca;
			}
			set
			{
				if ((this._idMarca != value))
				{
					if (this._Marcas.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMarcaChanging(value);
					this.SendPropertyChanging();
					this._idMarca = value;
					this.SendPropertyChanged("idMarca");
					this.OnidMarcaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TipoMarca_Equipos", Storage="_Equipos", ThisKey="idTipoMarca", OtherKey="idTipoMarca")]
		public EntitySet<Equipos> Equipos
		{
			get
			{
				return this._Equipos;
			}
			set
			{
				this._Equipos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Marcas_TipoMarca", Storage="_Marcas", ThisKey="idMarca", OtherKey="idMarca", IsForeignKey=true)]
		public Marcas Marcas
		{
			get
			{
				return this._Marcas.Entity;
			}
			set
			{
				Marcas previousValue = this._Marcas.Entity;
				if (((previousValue != value) 
							|| (this._Marcas.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Marcas.Entity = null;
						previousValue.TipoMarca.Remove(this);
					}
					this._Marcas.Entity = value;
					if ((value != null))
					{
						value.TipoMarca.Add(this);
						this._idMarca = value.idMarca;
					}
					else
					{
						this._idMarca = default(Nullable<short>);
					}
					this.SendPropertyChanged("Marcas");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tipos_TipoMarca", Storage="_Tipos", ThisKey="idTipo", OtherKey="idTipo", IsForeignKey=true)]
		public Tipos Tipos
		{
			get
			{
				return this._Tipos.Entity;
			}
			set
			{
				Tipos previousValue = this._Tipos.Entity;
				if (((previousValue != value) 
							|| (this._Tipos.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tipos.Entity = null;
						previousValue.TipoMarca.Remove(this);
					}
					this._Tipos.Entity = value;
					if ((value != null))
					{
						value.TipoMarca.Add(this);
						this._idTipo = value.idTipo;
					}
					else
					{
						this._idTipo = default(Nullable<short>);
					}
					this.SendPropertyChanged("Tipos");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Equipos(Equipos entity)
		{
			this.SendPropertyChanging();
			entity.TipoMarca = this;
		}
		
		private void detach_Equipos(Equipos entity)
		{
			this.SendPropertyChanging();
			entity.TipoMarca = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tipos")]
	public partial class Tipos : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idTipo;
		
		private string _tipo;
		
		private EntitySet<TipoMarca> _TipoMarca;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTipoChanging(short value);
    partial void OnidTipoChanged();
    partial void OntipoChanging(string value);
    partial void OntipoChanged();
    #endregion
		
		public Tipos()
		{
			this._TipoMarca = new EntitySet<TipoMarca>(new Action<TipoMarca>(this.attach_TipoMarca), new Action<TipoMarca>(this.detach_TipoMarca));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTipo", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idTipo
		{
			get
			{
				return this._idTipo;
			}
			set
			{
				if ((this._idTipo != value))
				{
					this.OnidTipoChanging(value);
					this.SendPropertyChanging();
					this._idTipo = value;
					this.SendPropertyChanged("idTipo");
					this.OnidTipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_tipo", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string tipo
		{
			get
			{
				return this._tipo;
			}
			set
			{
				if ((this._tipo != value))
				{
					this.OntipoChanging(value);
					this.SendPropertyChanging();
					this._tipo = value;
					this.SendPropertyChanged("tipo");
					this.OntipoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tipos_TipoMarca", Storage="_TipoMarca", ThisKey="idTipo", OtherKey="idTipo")]
		public EntitySet<TipoMarca> TipoMarca
		{
			get
			{
				return this._TipoMarca;
			}
			set
			{
				this._TipoMarca.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TipoMarca(TipoMarca entity)
		{
			this.SendPropertyChanging();
			entity.Tipos = this;
		}
		
		private void detach_TipoMarca(TipoMarca entity)
		{
			this.SendPropertyChanging();
			entity.Tipos = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usuarios")]
	public partial class Usuarios : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _idUsu;
		
		private string _nomUsu;
		
		private string _direcUsu;
		
		private System.Nullable<short> _idBarrio;
		
		private string _telUsu;
		
		private string _nomLog;
		
		private string _passLog;
		
		private System.Nullable<short> _idRol;
		
		private System.Nullable<bool> _habilitar;
		
		private EntitySet<Tareas> _Tareas;
		
		private EntityRef<Barrios> _Barrios;
		
		private EntityRef<Roles> _Roles;
		
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUsuChanging(short value);
    partial void OnidUsuChanged();
    partial void OnnomUsuChanging(string value);
    partial void OnnomUsuChanged();
    partial void OndirecUsuChanging(string value);
    partial void OndirecUsuChanged();
    partial void OnidBarrioChanging(System.Nullable<short> value);
    partial void OnidBarrioChanged();
    partial void OntelUsuChanging(string value);
    partial void OntelUsuChanged();
    partial void OnnomLogChanging(string value);
    partial void OnnomLogChanged();
    partial void OnpassLogChanging(string value);
    partial void OnpassLogChanged();
    partial void OnidRolChanging(System.Nullable<short> value);
    partial void OnidRolChanged();
    partial void OnhabilitarChanging(System.Nullable<bool> value);
    partial void OnhabilitarChanged();
    #endregion
		
		public Usuarios()
		{
			this._Tareas = new EntitySet<Tareas>(new Action<Tareas>(this.attach_Tareas), new Action<Tareas>(this.detach_Tareas));
			this._Barrios = default(EntityRef<Barrios>);
			this._Roles = default(EntityRef<Roles>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUsu", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short idUsu
		{
			get
			{
				return this._idUsu;
			}
			set
			{
				if ((this._idUsu != value))
				{
					this.OnidUsuChanging(value);
					this.SendPropertyChanging();
					this._idUsu = value;
					this.SendPropertyChanged("idUsu");
					this.OnidUsuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomUsu", DbType="NVarChar(40)")]
		public string nomUsu
		{
			get
			{
				return this._nomUsu;
			}
			set
			{
				if ((this._nomUsu != value))
				{
					this.OnnomUsuChanging(value);
					this.SendPropertyChanging();
					this._nomUsu = value;
					this.SendPropertyChanged("nomUsu");
					this.OnnomUsuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_direcUsu", DbType="NVarChar(40)")]
		public string direcUsu
		{
			get
			{
				return this._direcUsu;
			}
			set
			{
				if ((this._direcUsu != value))
				{
					this.OndirecUsuChanging(value);
					this.SendPropertyChanging();
					this._direcUsu = value;
					this.SendPropertyChanged("direcUsu");
					this.OndirecUsuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idBarrio", DbType="SmallInt")]
		public System.Nullable<short> idBarrio
		{
			get
			{
				return this._idBarrio;
			}
			set
			{
				if ((this._idBarrio != value))
				{
					if (this._Barrios.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidBarrioChanging(value);
					this.SendPropertyChanging();
					this._idBarrio = value;
					this.SendPropertyChanged("idBarrio");
					this.OnidBarrioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_telUsu", DbType="NVarChar(15)")]
		public string telUsu
		{
			get
			{
				return this._telUsu;
			}
			set
			{
				if ((this._telUsu != value))
				{
					this.OntelUsuChanging(value);
					this.SendPropertyChanging();
					this._telUsu = value;
					this.SendPropertyChanged("telUsu");
					this.OntelUsuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nomLog", DbType="NVarChar(10)")]
		public string nomLog
		{
			get
			{
				return this._nomLog;
			}
			set
			{
				if ((this._nomLog != value))
				{
					this.OnnomLogChanging(value);
					this.SendPropertyChanging();
					this._nomLog = value;
					this.SendPropertyChanged("nomLog");
					this.OnnomLogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passLog", DbType="Char(10)")]
		public string passLog
		{
			get
			{
				return this._passLog;
			}
			set
			{
				if ((this._passLog != value))
				{
					this.OnpassLogChanging(value);
					this.SendPropertyChanging();
					this._passLog = value;
					this.SendPropertyChanged("passLog");
					this.OnpassLogChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRol", DbType="SmallInt")]
		public System.Nullable<short> idRol
		{
			get
			{
				return this._idRol;
			}
			set
			{
				if ((this._idRol != value))
				{
					if (this._Roles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidRolChanging(value);
					this.SendPropertyChanging();
					this._idRol = value;
					this.SendPropertyChanged("idRol");
					this.OnidRolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_habilitar", DbType="Bit")]
		public System.Nullable<bool> habilitar
		{
			get
			{
				return this._habilitar;
			}
			set
			{
				if ((this._habilitar != value))
				{
					this.OnhabilitarChanging(value);
					this.SendPropertyChanging();
					this._habilitar = value;
					this.SendPropertyChanged("habilitar");
					this.OnhabilitarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuarios_Tareas", Storage="_Tareas", ThisKey="idUsu", OtherKey="idUsu")]
		public EntitySet<Tareas> Tareas
		{
			get
			{
				return this._Tareas;
			}
			set
			{
				this._Tareas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Barrios_Usuarios", Storage="_Barrios", ThisKey="idBarrio", OtherKey="idBarrio", IsForeignKey=true)]
		public Barrios Barrios
		{
			get
			{
				return this._Barrios.Entity;
			}
			set
			{
				Barrios previousValue = this._Barrios.Entity;
				if (((previousValue != value) 
							|| (this._Barrios.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Barrios.Entity = null;
						previousValue.Usuarios.Remove(this);
					}
					this._Barrios.Entity = value;
					if ((value != null))
					{
						value.Usuarios.Add(this);
						this._idBarrio = value.idBarrio;
					}
					else
					{
						this._idBarrio = default(Nullable<short>);
					}
					this.SendPropertyChanged("Barrios");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roles_Usuarios", Storage="_Roles", ThisKey="idRol", OtherKey="idRol", IsForeignKey=true)]
		public Roles Roles
		{
			get
			{
				return this._Roles.Entity;
			}
			set
			{
				Roles previousValue = this._Roles.Entity;
				if (((previousValue != value) 
							|| (this._Roles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roles.Entity = null;
						previousValue.Usuarios.Remove(this);
					}
					this._Roles.Entity = value;
					if ((value != null))
					{
						value.Usuarios.Add(this);
						this._idRol = value.idRol;
					}
					else
					{
						this._idRol = default(Nullable<short>);
					}
					this.SendPropertyChanged("Roles");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tareas(Tareas entity)
		{
			this.SendPropertyChanging();
			entity.Usuarios = this;
		}
		
		private void detach_Tareas(Tareas entity)
		{
			this.SendPropertyChanging();
			entity.Usuarios = null;
		}
	}
}
#pragma warning restore 1591
